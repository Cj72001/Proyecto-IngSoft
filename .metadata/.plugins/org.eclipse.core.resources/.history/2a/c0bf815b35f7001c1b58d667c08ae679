package com.uca.spring.controller;

import java.io.IOException;
import java.time.LocalDate; 
import java.time.Period;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.cassandra.CassandraProperties.Request;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.uca.spring.model.ActividadesExtra;
import com.uca.spring.model.Carrera;
import com.uca.spring.model.Ciclo;
import com.uca.spring.model.Estudiante;
import com.uca.spring.model.Materia;
import com.uca.spring.model.MiMateria;
import com.uca.spring.service.ActividadesExtraService;
import com.uca.spring.service.CarreraService;
import com.uca.spring.service.CicloService;
import com.uca.spring.service.EstudianteService;
import com.uca.spring.service.MateriaService;
import com.uca.spring.service.MiMateriaService;
import com.uca.spring.util.Util;

import javassist.expr.NewArray;

@Controller
public class AppController {
	
	@Autowired
	ActividadesExtraService actividadesExtraService;
	@Autowired
	CarreraService carreraService;
	@Autowired
	CicloService cicloService;
	@Autowired
	EstudianteService estudianteService;
	@Autowired
	MateriaService materiaService;
	@Autowired
	MiMateriaService miMateriaService;
	
	//temporales
	Estudiante estudianteEjemplo = new Estudiante();
	Carrera carreraEstudianteEjemplo = new Carrera();
	
	//Creando estudiantes:
	Estudiante estudiante1 =  new Estudiante();
	boolean estudianteExiste = false;
	Estudiante estudianteLogeado = new Estudiante();
	
	//Creando carrera:
	Carrera carreraEstudiante1 = new Carrera();
	Carrera carreraEstudianteLogeado = new Carrera();
	
	//Creando Ciclo:
	Ciclo ciclo1 = new Ciclo();
	
	//Actividades del estudiante:
	ActividadesExtra actividadExtraEstudianteEjemplo1 = new ActividadesExtra();
	ActividadesExtra actividadExtraEstudianteEjemplo2 = new ActividadesExtra();
	ActividadesExtra actividadExtraEstudianteEjemplo3 = new ActividadesExtra();
	ActividadesExtra actividadExtraEstudianteEjemplo4 = new ActividadesExtra();
	
	//MiMateria Estudiante1:
	MiMateria miMateria1 = new MiMateria();
	
	//Crear todos los objetos de la malla curricular:
	Materia materiaEstudianteEjemplo1= new Materia();
	Materia materiaEstudianteEjemplo2= new Materia();
	Materia materiaEstudianteEjemplo3= new Materia();
	Materia materiaEstudianteEjemplo4= new Materia();
	Materia materiaEstudianteEjemplo5= new Materia();
	Materia materiaEstudianteEjemplo6= new Materia();
	Materia materiaEstudianteEjemplo7= new Materia();
	Materia materiaEstudianteEjemplo8= new Materia();
	Materia materiaEstudianteEjemplo9= new Materia();
	Materia materiaEstudianteEjemplo10= new Materia();
	Materia materiaEstudianteEjemplo11= new Materia();
	Materia materiaEstudianteEjemplo12= new Materia();
	Materia materiaEstudianteEjemplo13= new Materia();
	Materia materiaEstudianteEjemplo14= new Materia();
	Materia materiaEstudianteEjemplo15= new Materia();
	Materia materiaEstudianteEjemplo16= new Materia();
	Materia materiaEstudianteEjemplo17= new Materia();
	Materia materiaEstudianteEjemplo18= new Materia();
	Materia materiaEstudianteEjemplo19= new Materia();
	Materia materiaEstudianteEjemplo20= new Materia();
	Materia materiaEstudianteEjemplo21= new Materia();
	Materia materiaEstudianteEjemplo22= new Materia();
	Materia materiaEstudianteEjemplo23= new Materia();
	Materia materiaEstudianteEjemplo24= new Materia();
	Materia materiaEstudianteEjemplo25= new Materia();
	Materia materiaEstudianteEjemplo26= new Materia();
	Materia materiaEstudianteEjemplo27= new Materia();
	Materia materiaEstudianteEjemplo28= new Materia();
	Materia materiaEstudianteEjemplo29= new Materia();
	Materia materiaEstudianteEjemplo30= new Materia();
	Materia materiaEstudianteEjemplo31= new Materia();
	Materia materiaEstudianteEjemplo32= new Materia();
	Materia materiaEstudianteEjemplo33= new Materia();
	Materia materiaEstudianteEjemplo34= new Materia();
	Materia materiaEstudianteEjemplo35= new Materia();
	Materia materiaEstudianteEjemplo36= new Materia();
	Materia materiaEstudianteEjemplo37= new Materia();
	Materia materiaEstudianteEjemplo38= new Materia();
	Materia materiaEstudianteEjemplo39= new Materia();
	Materia materiaEstudianteEjemplo40= new Materia();
	Materia materiaEstudianteEjemplo41= new Materia();
	Materia materiaEstudianteEjemplo42= new Materia();
	Materia materiaEstudianteEjemplo43= new Materia();
	Materia materiaEstudianteEjemplo44= new Materia();
	
	//vars
	boolean contraActualizada = false;
	boolean usuarioActualizado = false;

  @GetMapping("/")
  public String getForm() {
	  
	  //Creando objeto tipo Estudiante para ejemplo:
	  estudiante1.setCarnetEstudiante(38619);
	  estudiante1.setIdEstudiante(1);
	  estudiante1.setNombreEstudiante("Omar Flores Alas");
	  estudiante1.setContrasenaEstudiante("123");
	  estudiante1.setCarreraEstudiante(1);
	  estudiante1.setCicloActualEstudiante(1);
	  estudianteService.createEstudiante(estudiante1);
	  
	  //seteando objeto ciclo de estudiante1
	  ciclo1.setIdCiclo(1);
	  ciclo1.setNombreCiclo("Ciclo l");
	  ciclo1.setMisMateriasFK("1");
	  cicloService.createCiclo(ciclo1);
	  
	  
	//Creando objeto tipo Carrera para ejemplo (este objeto se enlazara con Estudiante por medio de su FK)
	  carreraEstudiante1.setIdCarrera(1);
	  carreraEstudiante1.setCUM(8.3);
	  carreraEstudiante1.setUvAprobadas(102);
	  carreraEstudiante1.setCantidadMateriasAprobadas(26);
	  carreraEstudiante1.setMateriasAprobadas("1,2,3,4,5");
	  carreraEstudiante1.setPosiblesMaterias(20);
	  carreraEstudiante1.setHorasSocialesInternas(105);
	  carreraEstudiante1.setHorasSocialesExterna(1);
	  carreraEstudiante1.setAnioCarrera(4);
	  carreraEstudiante1.setAvanceCarrera(59.0);
	  carreraService.createCarrera(carreraEstudiante1);
	  
//Creando objetos tipo ActividadExtra (seran las actividades relacionadas al estudiante) para ejemplo (este objeto se enlazara con Estudiante por medio de su FK)
	  
	  actividadExtraEstudianteEjemplo1.setNombreActividadesExtra("Reunirse con el grupo de Simu");
	  actividadExtraEstudianteEjemplo2.setNombreActividadesExtra("Entregar proyecto Arqui");
	  actividadExtraEstudianteEjemplo3.setNombreActividadesExtra("Meet BI 6:30pm");
	  actividadExtraEstudianteEjemplo4.setNombreActividadesExtra("Ver videos en youtube sobre CSR");
	  
	  //MiMateria Estudiante1
	  miMateria1.setIdMiMateria(1);
	  miMateria1.setCatedratico("Sin agregar");
	  miMateria1.setEvaluacion("Sin agregar");
	  miMateria1.setPonderacion("Sin agregar");
	  miMateria1.setFecha("Sin agregar");
	  miMateria1.setNota("Sin agregar");
	  miMateria1.setIdMateriaFK(0);
	  miMateria1.setIdEstudiante(1);
	  miMateriaService.createMiMateria(miMateria1);
	  
	//Creando objetos tipo materia (seran las materias aprobadas relacionadas al estudiante) para ejemplo (este objeto se enlazara con Estudiante por medio de su FK)
	//OBJETOD DE MALLA (prerequisito =0 cuando sea bachillerato)
	  materiaEstudianteEjemplo1.setNombreMateria("Precalculo");
	  materiaEstudianteEjemplo1.setIdMateria(1);
	  materiaEstudianteEjemplo1.setUv(4);
	  materiaEstudianteEjemplo1.setPreRequisito("0");
	  materiaService.createMateria(materiaEstudianteEjemplo1);
	  
	  materiaEstudianteEjemplo2.setNombreMateria("Optativa Técnica I");
	  materiaEstudianteEjemplo2.setIdMateria(2);
	  materiaEstudianteEjemplo2.setUv(3);
	  materiaEstudianteEjemplo2.setPreRequisito("0");
	  materiaService.createMateria(materiaEstudianteEjemplo2);

	  materiaEstudianteEjemplo3.setNombreMateria("Matemática Discreta I");
	  materiaEstudianteEjemplo3.setIdMateria(3);
	  materiaEstudianteEjemplo3.setUv(3);
	  materiaEstudianteEjemplo3.setPreRequisito("0");
	  materiaService.createMateria(materiaEstudianteEjemplo3);

	  materiaEstudianteEjemplo4.setNombreMateria("Fundamentos de Programación");
	  materiaEstudianteEjemplo4.setIdMateria(4);
	  materiaEstudianteEjemplo4.setUv(4);
	  materiaEstudianteEjemplo4.setPreRequisito("0");
	  materiaService.createMateria(materiaEstudianteEjemplo4);

	  materiaEstudianteEjemplo5.setNombreMateria("Algebra Vectorial y Matrices");
	  materiaEstudianteEjemplo5.setIdMateria(5);
	  materiaEstudianteEjemplo5.setUv(4);
	  materiaEstudianteEjemplo5.setPreRequisito("1");	 
	  materiaService.createMateria(materiaEstudianteEjemplo5);
	  

	  materiaEstudianteEjemplo6.setNombreMateria("Cálculo I");
	  materiaEstudianteEjemplo6.setIdMateria(6);
	  materiaEstudianteEjemplo6.setUv(4);
	  materiaEstudianteEjemplo6.setPreRequisito("1");	
	  materiaService.createMateria(materiaEstudianteEjemplo6);
	  

	  materiaEstudianteEjemplo7.setNombreMateria("Programación de Estructuras Dinámicas");
	  materiaEstudianteEjemplo7.setIdMateria(7);
	  materiaEstudianteEjemplo7.setUv(4);
	  materiaEstudianteEjemplo7.setPreRequisito("3,4");
	  materiaService.createMateria(materiaEstudianteEjemplo7);
	  

	  materiaEstudianteEjemplo8.setNombreMateria("Matemática Discreta II");
	  materiaEstudianteEjemplo8.setIdMateria(8);
	  materiaEstudianteEjemplo8.setUv(3);
	  materiaEstudianteEjemplo8.setPreRequisito("3");

	  materiaEstudianteEjemplo9.setNombreMateria("Física I");
	  materiaEstudianteEjemplo9.setIdMateria(9);
	  materiaEstudianteEjemplo9.setUv(5);
	  materiaEstudianteEjemplo9.setPreRequisito("5,6");
	  materiaService.createMateria(materiaEstudianteEjemplo9);

	  materiaEstudianteEjemplo10.setNombreMateria("Cálculo II");
	  materiaEstudianteEjemplo10.setIdMateria(10);
	  materiaEstudianteEjemplo10.setUv(4);
	  materiaEstudianteEjemplo10.setPreRequisito("5,6");
	  materiaService.createMateria(materiaEstudianteEjemplo10);

	  materiaEstudianteEjemplo11.setNombreMateria("Programación Orientada a Objetos");
	  materiaEstudianteEjemplo11.setIdMateria(11);
	  materiaEstudianteEjemplo11.setUv(4);
	  materiaEstudianteEjemplo11.setPreRequisito("7");
	  materiaService.createMateria(materiaEstudianteEjemplo11);
	  

	  materiaEstudianteEjemplo12.setNombreMateria("Bases de Datos");
	  materiaEstudianteEjemplo12.setIdMateria(12);
	  materiaEstudianteEjemplo12.setUv(4);
	  materiaEstudianteEjemplo12.setPreRequisito("7");
	  materiaService.createMateria(materiaEstudianteEjemplo12);
	  

	  materiaEstudianteEjemplo13.setNombreMateria("Electricidad y Magnetismo");
	  materiaEstudianteEjemplo13.setIdMateria(13);
	  materiaEstudianteEjemplo13.setUv(5);
	  materiaEstudianteEjemplo13.setPreRequisito("9,10");
	  materiaService.createMateria(materiaEstudianteEjemplo13);
	  

	  materiaEstudianteEjemplo14.setNombreMateria("Cálculo III");
	  materiaEstudianteEjemplo14.setIdMateria(14);
	  materiaEstudianteEjemplo14.setUv(4);
	  materiaEstudianteEjemplo14.setPreRequisito("10");
	  materiaService.createMateria(materiaEstudianteEjemplo14);
	  

	  materiaEstudianteEjemplo15.setNombreMateria("Programación WEB");
	  materiaEstudianteEjemplo15.setIdMateria(15);
	  materiaEstudianteEjemplo15.setUv(4);
	  materiaEstudianteEjemplo15.setPreRequisito("11");
	  materiaService.createMateria(materiaEstudianteEjemplo15);
	  

	  materiaEstudianteEjemplo16.setNombreMateria("Administración de Bases de Datos");
	  materiaEstudianteEjemplo16.setIdMateria(1);
	  materiaEstudianteEjemplo16.setUv(4);
	  materiaEstudianteEjemplo16.setPreRequisito("12");
	  materiaService.createMateria(materiaEstudianteEjemplo16);
	  

	  materiaEstudianteEjemplo17.setNombreMateria("Optativa Humanístico Social I");
	  materiaEstudianteEjemplo17.setIdMateria(17);
	  materiaEstudianteEjemplo17.setUv(3);
	  materiaEstudianteEjemplo17.setPreRequisito("0");
	  materiaService.createMateria(materiaEstudianteEjemplo17);
	  

	  materiaEstudianteEjemplo18.setNombreMateria("Análisis Numérico");
	  materiaEstudianteEjemplo18.setIdMateria(18);
	  materiaEstudianteEjemplo18.setUv(4);
	  materiaEstudianteEjemplo18.setPreRequisito("14");
	  materiaService.createMateria(materiaEstudianteEjemplo18);
	  

	  materiaEstudianteEjemplo19.setNombreMateria("Redes de Computadoras");
	  materiaEstudianteEjemplo19.setIdMateria(19);
	  materiaEstudianteEjemplo19.setUv(4);
	  materiaEstudianteEjemplo19.setPreRequisito("15");
	  materiaService.createMateria(materiaEstudianteEjemplo19);

	  
	  materiaEstudianteEjemplo20.setNombreMateria("Programación de Dispositivos Móviles");
	  materiaEstudianteEjemplo20.setIdMateria(20);
	  materiaEstudianteEjemplo20.setUv(4);
	  materiaEstudianteEjemplo20.setPreRequisito("11");
	  materiaService.createMateria(materiaEstudianteEjemplo20);
	  

	  materiaEstudianteEjemplo21.setNombreMateria("Análisis de Sistemas");
	  materiaEstudianteEjemplo21.setIdMateria(21);
	  materiaEstudianteEjemplo21.setUv(3);
	  materiaEstudianteEjemplo21.setPreRequisito("15");
	  materiaService.createMateria(materiaEstudianteEjemplo21);
	  

	  materiaEstudianteEjemplo22.setNombreMateria("Física II");
	  materiaEstudianteEjemplo22.setIdMateria(22);
	  materiaEstudianteEjemplo22.setUv(5);
	  materiaEstudianteEjemplo22.setPreRequisito("9,10");
	  materiaService.createMateria(materiaEstudianteEjemplo22);
	  

	  materiaEstudianteEjemplo23.setNombreMateria("Optativa Humanístico Social II");
	  materiaEstudianteEjemplo23.setIdMateria(23);
	  materiaEstudianteEjemplo23.setUv(3);
	  materiaEstudianteEjemplo23.setPreRequisito("Bachillerato");
	  materiaService.createMateria(materiaEstudianteEjemplo23);
	  

	  materiaEstudianteEjemplo24.setNombreMateria("Análisis de Algoritmos");
	  materiaEstudianteEjemplo24.setIdMateria(24);
	  materiaEstudianteEjemplo24.setUv(4);
	  materiaEstudianteEjemplo24.setPreRequisito("8");
	  materiaService.createMateria(materiaEstudianteEjemplo24);
	  

	  materiaEstudianteEjemplo25.setNombreMateria("Programación de Artefactos");
	  materiaEstudianteEjemplo25.setIdMateria(25);
	  materiaEstudianteEjemplo25.setUv(4);
	  materiaEstudianteEjemplo25.setPreRequisito("13,15");
	  materiaService.createMateria(materiaEstudianteEjemplo25);
	  

	  materiaEstudianteEjemplo26.setNombreMateria("Probabilidad y Estadística");
	  materiaEstudianteEjemplo26.setIdMateria(26);
	  materiaEstudianteEjemplo26.setUv(4);
	  materiaEstudianteEjemplo26.setPreRequisito("14");
	  materiaService.createMateria(materiaEstudianteEjemplo26);

	  
	  materiaEstudianteEjemplo27.setNombreMateria("Seguridad en Entornos de Desarrollo");
	  materiaEstudianteEjemplo27.setIdMateria(27);
	  materiaEstudianteEjemplo27.setUv(4);
	  materiaEstudianteEjemplo27.setPreRequisito("8,16");
	  materiaService.createMateria(materiaEstudianteEjemplo27);
	  

	  materiaEstudianteEjemplo28.setNombreMateria("Arquitectura de Computadoras");
	  materiaEstudianteEjemplo28.setIdMateria(28);
	  materiaEstudianteEjemplo28.setUv(4);
	  materiaEstudianteEjemplo28.setPreRequisito("13");
	  materiaService.createMateria(materiaEstudianteEjemplo28);
	  

	  materiaEstudianteEjemplo29.setNombreMateria("Técnicas de Simulación en Computadoras");
	  materiaEstudianteEjemplo29.setIdMateria(29);
	  materiaEstudianteEjemplo29.setUv(4);
	  materiaEstudianteEjemplo29.setPreRequisito("26");
	  materiaService.createMateria(materiaEstudianteEjemplo29);
	  

	  materiaEstudianteEjemplo30.setNombreMateria("Programación N-Capas");
	  materiaEstudianteEjemplo30.setIdMateria(30);
	  materiaEstudianteEjemplo30.setUv(4);
	  materiaEstudianteEjemplo30.setPreRequisito("11");
	  materiaService.createMateria(materiaEstudianteEjemplo30);
	  

	  materiaEstudianteEjemplo31.setNombreMateria("Fundamentos de Inteligencia de Negocios");
	  materiaEstudianteEjemplo31.setIdMateria(31);
	  materiaEstudianteEjemplo31.setUv(4);
	  materiaEstudianteEjemplo31.setPreRequisito("16");
	  materiaService.createMateria(materiaEstudianteEjemplo31);
	  

	  materiaEstudianteEjemplo32.setNombreMateria("Optativa Humanístico Social III");
	  materiaEstudianteEjemplo32.setIdMateria(32);
	  materiaEstudianteEjemplo32.setUv(3);
	  materiaEstudianteEjemplo32.setPreRequisito("0");
	  materiaService.createMateria(materiaEstudianteEjemplo32);

	  
	  materiaEstudianteEjemplo33.setNombreMateria("Sistemas Operativos");
	  materiaEstudianteEjemplo33.setIdMateria(33);
	  materiaEstudianteEjemplo33.setUv(4);
	  materiaEstudianteEjemplo33.setPreRequisito("28");
	  materiaService.createMateria(materiaEstudianteEjemplo33);

	  materiaEstudianteEjemplo34.setNombreMateria("Programación Declarativa");
	  materiaEstudianteEjemplo34.setIdMateria(34);
	  materiaEstudianteEjemplo34.setUv(4);
	  materiaEstudianteEjemplo34.setPreRequisito("15");
	  materiaService.createMateria(materiaEstudianteEjemplo34);

	  materiaEstudianteEjemplo35.setNombreMateria("Ingeniería de Software");
	  materiaEstudianteEjemplo35.setIdMateria(35);
	  materiaEstudianteEjemplo35.setUv(4);
	  materiaEstudianteEjemplo35.setPreRequisito("21");
	  materiaService.createMateria(materiaEstudianteEjemplo35);

	  materiaEstudianteEjemplo36.setNombreMateria("Formulación y Evaluación de Proyectos");
	  materiaEstudianteEjemplo36.setIdMateria(36);
	  materiaEstudianteEjemplo36.setUv(4);
	  materiaEstudianteEjemplo36.setPreRequisito("21");
	  materiaService.createMateria(materiaEstudianteEjemplo36);
	  

	  materiaEstudianteEjemplo37.setNombreMateria("Optativa Humanístico Social IV");
	  materiaEstudianteEjemplo37.setIdMateria(37);
	  materiaEstudianteEjemplo37.setUv(3);
	  materiaEstudianteEjemplo37.setPreRequisito("0");
	  materiaService.createMateria(materiaEstudianteEjemplo37);

	  materiaEstudianteEjemplo38.setNombreMateria("Optativa Técnica II");
	  materiaEstudianteEjemplo38.setIdMateria(38);
	  materiaEstudianteEjemplo38.setUv(4);
	  materiaEstudianteEjemplo38.setPreRequisito("0");
	  materiaService.createMateria(materiaEstudianteEjemplo38);

	  materiaEstudianteEjemplo39.setNombreMateria("Aplicaciones de Código Abierto");
	  materiaEstudianteEjemplo39.setIdMateria(39);
	  materiaEstudianteEjemplo39.setUv(4);
	  materiaEstudianteEjemplo39.setPreRequisito("21");
	  materiaService.createMateria(materiaEstudianteEjemplo39);

	  materiaEstudianteEjemplo40.setNombreMateria("Práctica Profesional I");
	  materiaEstudianteEjemplo40.setIdMateria(40);
	  materiaEstudianteEjemplo40.setUv(4);
	  materiaEstudianteEjemplo40.setPreRequisito("36");
	  materiaService.createMateria(materiaEstudianteEjemplo40);

	  materiaEstudianteEjemplo41.setNombreMateria("Optativa Técnica III");
	  materiaEstudianteEjemplo41.setIdMateria(41);
	  materiaEstudianteEjemplo41.setUv(4);
	  materiaEstudianteEjemplo41.setPreRequisito("0");
	  materiaService.createMateria(materiaEstudianteEjemplo41);

	  materiaEstudianteEjemplo42.setNombreMateria("Teorías de Lenguaje de Programación");
	  materiaEstudianteEjemplo42.setIdMateria(42);
	  materiaEstudianteEjemplo42.setUv(4);
	  materiaEstudianteEjemplo42.setPreRequisito("24");
	  materiaService.createMateria(materiaEstudianteEjemplo42);

	  materiaEstudianteEjemplo43.setNombreMateria("Optativa Humanístico Social V");
	  materiaEstudianteEjemplo43.setIdMateria(1);
	  materiaEstudianteEjemplo43.setUv(3);
	  materiaEstudianteEjemplo43.setPreRequisito("0");
	  materiaService.createMateria(materiaEstudianteEjemplo43);

	  materiaEstudianteEjemplo44.setNombreMateria("Práctica Profesional II");
	  materiaEstudianteEjemplo44.setIdMateria(1);
	  materiaEstudianteEjemplo44.setUv(4);
	  materiaEstudianteEjemplo44.setPreRequisito("40");
	  materiaService.createMateria(materiaEstudianteEjemplo44);
	   
	  
    return "login.jsp";
  }
  
  @GetMapping("/login")
  public String login() {
	  
	  //Al volver al login (ya sea al deslogearse)
	  carreraEstudianteLogeado = null;
	  estudianteLogeado = null;
	  estudianteExiste = false;
	  
    return "login.jsp";
  } 
  
  @GetMapping("/semester")
  public String semester() {
    return "semester.jsp";
  } 
  
  @GetMapping("/calculateScore")
  public String calculateScore() {
    return "calculateScore.jsp";
  } 
  
  @GetMapping("/activitiesUpdate")
  public String activitiesUpdate() {
    return "activitiesUpdate.jsp";
  }
  
  @GetMapping("/subjectsUpdate")
  public String subjectsUpdate() {
    return "subjectsUpdate.jsp";
  } 
  
  @GetMapping("/dataUpdate")
  public String dataUpdate() {
    return "dataUpdate.jsp";
  } 
  
  @GetMapping("/socialUpdate")
  public String socialUpdate() {
    return "socialUpdate.jsp";
  } 
  
  @GetMapping("/userUpdate")
  public String userUpdate() {
    return "userUpdate.jsp";
  } 
  
  @GetMapping("/closeSemester")
  public String closeSemester(ModelMap modelMap) {
	modelMap.put("nombreEstudianteCS", estudianteEjemplo.getNombreEstudiante());
    return "closeSemester.jsp"; 
  } 
  
  @GetMapping("/closeSemesterSuccess")
  public String closeSemesterSuccess(ModelMap modelMap) {
	  
	modelMap.put("nombreEstudianteCSS", estudianteEjemplo.getNombreEstudiante());
    return "closeSemesterSuccess.jsp"; 
  }  
  
  @GetMapping("/recoveryPasword")
  public String recoveryPasword() {
    return "passwordRecover.jsp"; 
  } 
  
  @GetMapping("/register")
  public String register() {
    return "register.jsp";      
  }  
  
  @GetMapping("/mainPage")
  public String mainPage(ModelMap modelMap) {
	  
	//Lista de tabla Estudiante
	  List<Estudiante> estudiantes = new ArrayList<Estudiante>();
	  estudianteService.getEstudiantes().forEach(e -> estudiantes.add(e));
	  
	  estudiantes.forEach(e -> {
		  if(e.getIdEstudiante().toString().equals(estudianteLogeado.getIdEstudiante().toString())){
		  estudianteLogeado = e;
		  carreraEstudianteLogeado = carreraService.getCarreraById(e.getIdEstudiante());
	  }});
	  
	//menu atributos sobre la carrera del estudiante:
	  modelMap.put("nombreEstudiante", estudianteLogeado.getNombreEstudiante());
	  modelMap.put("anioEstudiante", "Estudiante de "+carreraEstudianteLogeado.getAnioCarrera()+" Anio");
	  modelMap.put("numeroMateriasAprobadasEstudiante", carreraEstudianteLogeado.getCantidadMateriasAprobadas());
	  modelMap.put("cumEstudiante", carreraEstudianteLogeado.getCUM());
	  modelMap.put("uVEstudiante", carreraEstudianteLogeado.getUvAprobadas());
	  modelMap.put("avanceCarreraEstudiante", carreraEstudianteLogeado.getAvanceCarrera());
	  modelMap.put("materiasDisponiblesEstudiante", carreraEstudianteLogeado.getPosiblesMaterias());
	  modelMap.put("horasInternasEstudiante", carreraEstudianteLogeado.getHorasSocialesInternas());
	  modelMap.put("horasExternasEstudiante", carreraEstudianteLogeado.getHorasSocialesExterna());
    return "mainPage.jsp";
  } 
  
  @GetMapping("/activities")
  public String activities(ModelMap modelMap) {
	  modelMap.put("nombreActividad1", actividadExtraEstudianteEjemplo1.getNombreActividadesExtra());
	  modelMap.put("nombreActividad2", actividadExtraEstudianteEjemplo2.getNombreActividadesExtra());
	  modelMap.put("nombreActividad3", actividadExtraEstudianteEjemplo3.getNombreActividadesExtra());
	  modelMap.put("nombreActividad4", actividadExtraEstudianteEjemplo4.getNombreActividadesExtra());
    return "activities.jsp";
  } 
  
  ////////////TODO:HACER QUE SE VEA DINAMICAMENTE
  @GetMapping("/availableSubjects")
  public String availableSubjects(Model model) {
	  
	//Separa las el id de las materias aprobadas que tiene el estudiante en la tabla carrera 
	  //y busca las materias en la tabla Materia y las agrega a la lista materias para mostrarlas
	  List<Materia> materias = new ArrayList<Materia>();
	  
	  String materiasHabilesEstudiante = carreraService.getCarreraById(estudianteLogeado.getIdEstudiante()).getMateriasAprobadas();
      String[] split = materiasHabilesEstudiante.split(",");
	  
      for (int i=0; i<split.length; i++) {
    	  materias.add(materiaService.getMateriaById(Integer.parseInt(split[i])));
      }
      
	  
	  model.addAttribute("materias",materias); 
	  
	  
	  
    return "availableSubjects.jsp";
  }
  
  
  public String availableSubjects2(HttpServletRequest request) {
	  
	//Separa las el id de las materias aprobadas que tiene el estudiante en la tabla carrera 
	  //y busca las materias en la tabla Materia y las agrega a la lista materias para mostrarlas
	  List<Materia> materias = new ArrayList<Materia>();
	  
	  String materiasHabilesEstudiante = carreraService.getCarreraById(estudianteLogeado.getIdEstudiante()).getMateriasAprobadas();
      String[] split = materiasHabilesEstudiante.split(",");
	  
      for (int i=0; i<split.length; i++) {
    	  materias.add(materiaService.getMateriaById(Integer.parseInt(split[i])));
      }
      
	  materias.forEach(m ->{
		  m.getIdMateria();
		  m.getNombreMateria();
		  m.getPreRequisito();
		  m.getUv();
	  });
	  

	  request.setAttribute("materias",materias); 
	  request.getRequestDispatcher("availableSubjects.jsp");
	  
	  
    return "availableSubjects.jsp";
  } 
  
  
  @PostMapping("/userUpdateSuccess")
  public String userUpdateSuccess(@RequestParam("name") String name, 
		  @RequestParam("year") String year,
		  @RequestParam("carnet") String carnet,ModelMap modelMap){
	  
	//Lista de tabla Estudiante
	  List<Estudiante> estudiantes = new ArrayList<Estudiante>();
	  estudianteService.getEstudiantes().forEach(e -> estudiantes.add(e));
	  
	  
	  estudiantes.forEach( e -> {
		 if(e.getCarnetEstudiante().toString().equals(carnet)) {
			 estudianteService.updateEstudianteName(e, name);
		 }
	  });
	  
	//Lista tabla Carrera
	  List<Carrera> carreras = new ArrayList<Carrera>();
	  carreraService.getCarreras().forEach(c -> carreras.add(c));
	  
	  carreras.forEach( c -> {
			 if(c.getIdCarrera().toString().equals(estudianteLogeado.getCarreraEstudiante().toString())) {
				 carreraService.updateCarreraAnio(c,Integer.parseInt(year));
			 }
		  });
	  
	  
  
	  
	  if(name.isBlank() || year.isBlank() || carnet.isBlank() ) {
		  modelMap.put("errorUU", "No deje espacios en blanco");
		    return "userUpdate.jsp";
	  }
	  //Si el usuario que modificara no esta en la bdd
	  else if(!carnet.equals(estudianteLogeado.getCarnetEstudiante().toString())) {
		  modelMap.put("errorUU", "Carnet incorrecto");
		    return "userUpdate.jsp";
	  }
	  else{
		  modelMap.put("nombreEstudianteUUS", estudianteEjemplo.getNombreEstudiante());
		    return "userUpdateSuccess.jsp";
	  }
	  
    
  } 
  
  @PostMapping("/activitiesUpSuccess")
  public String activitiesUpSuccess(@RequestParam("nameActivity") String nameActivity, ModelMap modelMap){
  
	  if(nameActivity.isBlank()) {
		  modelMap.put("errorU", "No deje espacios en blanco");
		    return "activitiesUpdate.jsp";
	  }
	  else {
		  modelMap.put("nombreEstudianteAUS", estudianteEjemplo.getNombreEstudiante());
		    return "activitiesUpSuccess.jsp";
	  }
	  
    
  } 
  
  @PostMapping("/subjectsUpdateSuccess")
  public String subjectsUpdateSuccess(@RequestParam("subject") String subject,@RequestParam("professor") String professor,
		  ModelMap modelMap){
  
	  if(subject.isBlank() || professor.isBlank() ) {
		  modelMap.put("errorSU", "No deje espacios en blanco");
		    return "subjectsUpdate.jsp";
	  }
	  //En el caso que en la bdd no este la materia en la tabla "MiMateria"
	  else if(!subject.equals("Calculo lll") && !professor.equals("Ing")){
		  modelMap.put("errorSU", "Materia no encontrada");
		    return "subjectsUpdate.jsp";
	  }
	//En el caso 1ue en la bdd si este la materia en la tabla "MiMateria" y se 
	//haya modificado exitosamente
	  else{
		  modelMap.put("nombreEstudianteUS", estudianteEjemplo.getNombreEstudiante());
		    return "subjectsUpdateSuccess.jsp";
	  }
    
  } 
  
  ////TODO:ARREGLAR EN JSP LOS BOTONES
  @PostMapping("/socialUpdate")
  public String socialUpdate(@RequestParam("internal") String internal, ModelMap modelMap){
  
	  
	  //Lista tabla Carrera
	  List<Carrera> carreras = new ArrayList<Carrera>();
	  carreraService.getCarreras().forEach(c -> carreras.add(c));
	  
	  carreras.forEach(c -> {
		  if(c.getIdCarrera().toString().equals(estudianteLogeado.getIdEstudiante().toString())){
		  carreraService.updateCarreraHI(c, Integer.parseInt(internal));
	  }});
	  
	  
	  if(internal.isBlank()) {
		  modelMap.put("errorSoU", "No deje espacios en blanco");
		    return "socialUpdate.jsp";
	  }
	  else{
		  modelMap.put("nombreEstudianteSUS", estudianteEjemplo.getNombreEstudiante());
		    return "socialUpdateSuccess.jsp";
	  }
    
  } 
  
  @PostMapping("/socialUpdate2")
  public String socialUpdate2(@RequestParam("external") String external, ModelMap modelMap){
  
	//Lista tabla Carrera
	  List<Carrera> carreras = new ArrayList<Carrera>();
	  carreraService.getCarreras().forEach(c -> carreras.add(c));
	  
	  carreras.forEach(c -> {
		  if(c.getIdCarrera().toString().equals(estudianteLogeado.getIdEstudiante().toString())){
		  carreraService.updateCarreraHE(c, Integer.parseInt(external));
	  }});
	  
	  if(external.isBlank()) {
		  modelMap.put("errorSoU2", "No deje espacios en blanco");
		    return "socialUpdate.jsp";
	  }
	  else{
		  modelMap.put("nombreEstudianteSUS", estudianteEjemplo.getNombreEstudiante());
		    return "socialUpdateSuccess.jsp";
	  }
    
  } 
  
  @PostMapping("/addSubject")
  public String addSubject(@RequestParam("materia") String materia, ModelMap modelMap){
  
	  if(materia.isBlank()) {
		  modelMap.put("errorASS", "No deje espacios en blanco");
		    return "availableSubjects.jsp";
	  }
	  else{
		  modelMap.put("nombreEstudianteASS", estudianteEjemplo.getNombreEstudiante());
		    return "addSemesterSuccess.jsp";
	  }
    
  }
  
  @PostMapping("/subjectsUpdateSuccess2")
  public String subjectsUpdateSuccess2(@RequestParam("assessment") String assessment,@RequestParam("percentage") String percentage,
		  @RequestParam("date") String date, ModelMap modelMap){
  
	  if(assessment.isBlank() || percentage.isBlank() || date.isBlank()) {
		  modelMap.put("errorSU2", "No deje espacios en blanco");
		    return "subjectsUpdate.jsp";
	  }
	//En el caso que la en tabla "MiMateria" ya se haya agregado 
	//La nueva materia
	  else{
		  modelMap.put("nombreEstudianteUS", estudianteEjemplo.getNombreEstudiante());
		    return "subjectsUpdateSuccess.jsp";
	  }
    
  } 
  
  @PostMapping("/loginn")   
  public String login(@RequestParam("CARNET") String CARNET,
		  @RequestParam("PASSWORD") String PASSWORD, 
		  ModelMap modelMap){ 
	 
	  //Lista de tabla Estudiante
	  List<Estudiante> estudiantes = new ArrayList<Estudiante>();
	  estudianteService.getEstudiantes().forEach(e -> estudiantes.add(e));
	  
	  //Lista tabla Carrera
	  List<Carrera> carreras = new ArrayList<Carrera>();
	  carreraService.getCarreras().forEach(c -> carreras.add(c));
	  
	  estudiantes.forEach(e -> {
		  if(e.getCarnetEstudiante().toString().equals(CARNET) && e.getContrasenaEstudiante().equals(PASSWORD)){
		  estudianteLogeado = e;
		  estudianteExiste = true;
	  }});
	  
	  carreras.forEach(c -> {
		 if(estudianteLogeado.getCarreraEstudiante().equals(c.getIdCarrera())) {
			 carreraEstudianteLogeado = c;
			 
		 }
	  });
	  
	  if(estudianteExiste){
		//menu atributos sobre la carrera del estudiante:
		  modelMap.put("nombreEstudiante", estudianteLogeado.getNombreEstudiante());
		  modelMap.put("anioEstudiante", "Estudiante de "+carreraEstudianteLogeado.getAnioCarrera()+" Anio");
		  modelMap.put("numeroMateriasAprobadasEstudiante", carreraEstudianteLogeado.getCantidadMateriasAprobadas());
		  modelMap.put("cumEstudiante", carreraEstudianteLogeado.getCUM());
		  modelMap.put("uVEstudiante", carreraEstudianteLogeado.getUvAprobadas());
		  modelMap.put("avanceCarreraEstudiante", carreraEstudianteLogeado.getAvanceCarrera());
		  modelMap.put("materiasDisponiblesEstudiante", carreraEstudianteLogeado.getPosiblesMaterias());
		  modelMap.put("horasInternasEstudiante", carreraEstudianteLogeado.getHorasSocialesInternas());
		  modelMap.put("horasExternasEstudiante", carreraEstudianteLogeado.getHorasSocialesExterna());
		  
		//Separa las el id de las materias aprobadas que tiene el estudiante en la tabla carrera 
		  //y busca las materias en la tabla Materia y las agrega a la lista materias para mostrarlas
		  List<Materia> materias = new ArrayList<Materia>();
		  
		  String materiasHabilesEstudiante = carreraService.getCarreraById(estudianteLogeado.getIdEstudiante()).getMateriasAprobadas();
	      String[] split = materiasHabilesEstudiante.split(",");
		  
	      for (int i=0; i<split.length; i++) {
	    	  materias.add(materiaService.getMateriaById(Integer.parseInt(split[i])));
	      }
	      
		  
		  modelMap.addAttribute("materias",materias); 
		  
		  return "mainPage.jsp";
	  }
	  else if(CARNET.isBlank() || PASSWORD.isBlank()) {
		  modelMap.put("errorL","No deje espacios en blanco");
		  return "login.jsp";
	  }
	  else {
		  modelMap.put("errorL","Carnet o Contrasena incorrecto");
		  return "login.jsp";
	  }
	
  } 
  
  
  @PostMapping("/actualizarContrasena")
  public String actualizarContrasena(@RequestParam("nombrePR") String nombrePR,
		  @RequestParam("carnetPR") String carnetPR, 
		  @RequestParam("passwordPR") String passwordPR,
		  ModelMap modelMap){
	  
	  
	  //Lista de tabla Estudiante
	  List<Estudiante> estudiantes = new ArrayList<Estudiante>();
	  estudianteService.getEstudiantes().forEach(e -> estudiantes.add(e));
	  
	  
	  estudiantes.forEach( e -> {
		 if(e.getNombreEstudiante().equals(nombrePR) && e.getCarnetEstudiante().toString().equals(carnetPR)) {
			 estudianteService.updateEstudiante(e, passwordPR);
			 contraActualizada = true;
		 }
	  });
	  
	  
	  //Si los datos escritos estan en la bdd
	  if(contraActualizada){
		  //Se actualizo la contrasena
		  
		  modelMap.put("nombreEstudiantePUS", estudianteEjemplo.getNombreEstudiante());
		  return "passUpdateSucess.jsp";
	  } 
	  else if(nombrePR.isBlank() || carnetPR.isBlank() || passwordPR.isBlank()) {
		  modelMap.put("errorPR", "No deje espacios en blanco");
		  return "passwordRecover.jsp";
	  }
	  else { 
		  modelMap.put("errorPR", "Usuario no encontrado");
		  return "passwordRecover.jsp";
	  } 
	
  } 
  
  
  
  @PostMapping("/registrarEstudiante")
  public String registrarEstudiante(@RequestParam("nombreRe") String nombreRe,
		  @RequestParam("carnetRe") String carnetRe, 
		  @RequestParam("passwordRe") String passwordRe,
		  @RequestParam("passwordRe2") String passwordRe2,
		  ModelMap modelMap){ 
	  
	  if(nombreRe.isEmpty()||carnetRe.isEmpty()||passwordRe.isEmpty()||passwordRe.isEmpty()){
		  //Se actualizo la contrasena
		  
		  modelMap.put("errorRe", "No deje espacios en blanco");
		  return "register.jsp";
	  } 
	  else {
		  
		   
		  Estudiante newEstudiante = new Estudiante();
		  newEstudiante.setNombreEstudiante(nombreRe);
		  newEstudiante.setCarnetEstudiante(Integer.parseInt(carnetRe));
		  newEstudiante.setContrasenaEstudiante(passwordRe2);
		  
		  //id autoincrementable:
		  
		//Lista de tabla Estudiante
		  List<Estudiante> estudiantes = new ArrayList<Estudiante>();
		  estudianteService.getEstudiantes().forEach(e -> estudiantes.add(e));
		  
		  //Lista tabla Ciclo
		  List<Ciclo> ciclos = new ArrayList<Ciclo>();
		  cicloService.getCiclos().forEach(ci -> ciclos.add(ci));
		  
		  List<MiMateria> misMaterias= new ArrayList<MiMateria>();
		  miMateriaService.getMisMaterias().forEach(m -> misMaterias.add(m));
		  
		  int lastIdx = estudiantes.size()-1;
		  Estudiante lastEstudiante= estudiantes.get(lastIdx);
		  
		  int idEstudiante= lastEstudiante.getIdEstudiante()+1;
		  newEstudiante.setCicloActualEstudiante(idEstudiante);
		  newEstudiante.setIdEstudiante(idEstudiante);
		  newEstudiante.setCarreraEstudiante(idEstudiante);
		  
		  int lastIdx2 = ciclos.size()-1;
		  Ciclo lastCiclo= ciclos.get(lastIdx2);
		  
		  int idCiclo = lastCiclo.getIdCiclo()+1;
		  newEstudiante.setCicloActualEstudiante(idCiclo);
		  
		  int lastIdx3 = misMaterias.size()-1;
		  MiMateria lastMiMateria= misMaterias.get(lastIdx3);
		  
		  int idMiMateria= lastMiMateria.getIdMiMateria()+1;
		  
		  //creando estudiante:
		  estudianteService.createEstudiante(newEstudiante);
		  
		  //creando Actividades Extra, Carrera y Ciclo, que esta relacionado con el estudiante
		  ActividadesExtra newActividadExtra = new ActividadesExtra();
		  newActividadExtra.setIdActividadesExtra(idEstudiante);
		  
		  //carrera de nuewEstudiante
		  Carrera newCarrera = new Carrera();
		  newCarrera.setIdCarrera(idEstudiante);
		  newCarrera.setCUM(0.0);
		  newCarrera.setUvAprobadas(0);
		  newCarrera.setCantidadMateriasAprobadas(0);
		  newCarrera.setMateriasAprobadas("0");
		  newCarrera.setPosiblesMaterias(9);
		  newCarrera.setHorasSocialesInternas(0);
		  newCarrera.setHorasSocialesExterna(0);
		  newCarrera.setAnioCarrera(1);
		  newCarrera.setAvanceCarrera(0.0);
		  carreraService.createCarrera(newCarrera);
		  
		  //Ciclo de newEstudiante
		  Ciclo newCiclo = new Ciclo();
		  newCiclo.setIdCiclo(idCiclo);
		  newCiclo.setNombreCiclo("Ciclo de " + newEstudiante.getNombreEstudiante());
		  newCiclo.setMisMateriasFK("0");
		  cicloService.createCiclo(newCiclo);
		  
		  //MiMateria de newEstudiante
		  MiMateria newMiMateria = new MiMateria();
		  newMiMateria.setIdMiMateria(idMiMateria);
		  newMiMateria.setIdEstudiante(idEstudiante);
		  newMiMateria.setCatedratico("Sin agregar");
		  newMiMateria.setEvaluacion("Sin agregar");
		  newMiMateria.setPonderacion("Sin agregar");
		  newMiMateria.setFecha("Sin agregar");
		  newMiMateria.setNota("Sin agregar");
		  newMiMateria.setIdMateriaFK(0);
		  miMateriaService.createMiMateria(newMiMateria);
		  
		  
		  
		  modelMap.put("nombreEstudianteRegistrado", nombreRe);
		  return "regUpdateSuccess.jsp";
	  }
	
  }
   
  
}

    
	  
   
    
  
  

